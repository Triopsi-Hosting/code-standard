<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="triopsics" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">

	<description>Triopsi Code Standard</description>

	<rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="220"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
 	</rule>

	<rule ref="Squiz.Commenting">
		<!-- Excluded to allow /* translators: ... */ comments -->
		<exclude name="Squiz.Commenting.BlockComment.SingleLine"/>
		<!-- Sniff seems to require indenting with spaces -->
		<exclude name="Squiz.Commenting.BlockComment.FirstLineIndent"/>
		<!-- Sniff seems to require indenting with spaces -->
		<exclude name="Squiz.Commenting.BlockComment.LineIndent"/>
		<!-- Sniff seems to require indenting with spaces -->
		<exclude name="Squiz.Commenting.BlockComment.LastLineIndent"/>
		<!-- WP requires /** for require() et al. See https://github.com/squizlabs/PHP_CodeSniffer/pull/581 -->
		<exclude name="Squiz.Commenting.BlockComment.WrongStart"/>
		<!-- WP handbook doesn't clarify one way or another, so ignore -->
		<exclude name="Squiz.Commenting.BlockComment.NoEmptyLineAfter"/>

		<!-- WP prefers indicating @since, @package, @subpackage etc in class comments -->
		<exclude name="Squiz.Commenting.ClassComment.TagNotAllowed"/>

		<!-- WP doesn't require //end ... for classes and functions -->
		<exclude name="Squiz.Commenting.ClosingDeclarationComment.Missing"/>

		<!-- Excluded to allow param documentation for arrays  -->
		<exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/>

		<!-- WP doesn't require a @author value for Squiz -->
		<exclude name="Squiz.Commenting.FileComment.IncorrectAuthor"/>
		<!-- WP doesn't require a @copyright value for Squiz -->
		<exclude name="Squiz.Commenting.FileComment.IncorrectCopyright"/>
		<!-- WP doesn't require @author tags -->
		<exclude name="Squiz.Commenting.FileComment.MissingAuthorTag"/>
		<!-- WP doesn't require @subpackage tags -->
		<exclude name="Squiz.Commenting.FileComment.MissingSubpackageTag"/>
		<!-- WP doesn't require @copyright tags -->
		<exclude name="Squiz.Commenting.FileComment.MissingCopyrightTag"/>
		<!-- WP has a different prefered order of tags -->
		<exclude name="Squiz.Commenting.FileComment.PackageTagOrder"/>
		<!-- WP has a different prefered order of tags -->
		<exclude name="Squiz.Commenting.FileComment.SubpackageTagOrder"/>
		<!-- WP has a different prefered order of tags -->
		<exclude name="Squiz.Commenting.FileComment.AuthorTagOrder"/>
		<!-- WP has a different prefered order of tags -->
		<exclude name="Squiz.Commenting.FileComment.CopyrightTagOrder"/>

		<!-- WP prefers int and bool instead of integer and boolean -->
		<exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>
		<!-- WP prefers int and bool instead of integer and boolean -->
		<exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>
		<!-- WP prefers indicating a @return null for early returns -->
		<exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/>
		<!-- WP states not all functions require @return -->
		<exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>
		<!-- Excluded to allow param documentation for arrays  -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>
		<!-- Excluded to allow param documentation for arrays  -->
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>
		<!-- It is too early for PHP7 features to be required -->
		<exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing"/>
		<!-- WP doesn't require type hints -->
		<exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/>

		<!-- Exclude to allow duplicate hooks to be documented -->
		<exclude name="Squiz.Commenting.InlineComment.DocBlock"/>
		<!-- Excluded to allow /* translators: ... */ comments -->
		<exclude name="Squiz.Commenting.InlineComment.NotCapital"/>
		<!-- WP handbook doesn't clarify one way or another, so ignore -->
		<exclude name="Squiz.Commenting.InlineComment.SpacingAfter"/>

		<!-- Not in Inline Docs standard, and a code smell -->
		<exclude name="Squiz.Commenting.LongConditionClosingComment"/>

		<!-- Not in Inline Docs standard, and needed to bypass WPCS checks -->
		<exclude name="Squiz.Commenting.PostStatementComment"/>

		<!-- WP prefers int and bool instead of integer and boolean -->
		<exclude name="Squiz.Commenting.VariableComment.IncorrectVarType"/>
		<!-- WP demands a @since tag for class variables -->
		<exclude name="Squiz.Commenting.VariableComment.TagNotAllowed"/>
		<!-- WP prefers @since first -->
		<exclude name="Squiz.Commenting.VariableComment.VarOrder"/>
	</rule>

	<rule ref="Generic.Commenting.DocComment">
		<!-- WP has different alignment of tag values -->
		<exclude name="Generic.Commenting.DocComment.TagValueIndent"/>
		<!-- WP has a different prefered order of tags -->
		<exclude name="Generic.Commenting.DocComment.ParamNotFirst"/>
		<!-- Excluded to allow param documentation for arrays  -->
		<exclude name="Generic.Commenting.DocComment.ParamGroup"/>
		<!-- WP prefers no empty line between @param tags and @return -->
		<exclude name="Generic.Commenting.DocComment.NonParamGroup"/>
		<!-- Excluded to allow param documentation for arrays  -->
		<exclude name="Generic.Commenting.DocComment.TagsNotGrouped"/>
		<!-- Exclude to allow duplicate hooks to be documented -->
		<exclude name="Generic.Commenting.DocComment.ContentAfterOpen"/>
		<!-- Exclude to allow duplicate hooks to be documented -->
		<exclude name="Generic.Commenting.DocComment.SpacingBeforeShort"/>
		<!-- Exclude to allow duplicate hooks to be documented -->
		<exclude name="Generic.Commenting.DocComment.ContentBeforeClose"/>
	</rule>

	<!-- Add in some extra rules from other standards. -->
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
	<rule ref="Generic.Commenting.Todo"/>

	<arg name="tab-width" value="4"/>
	<!-- Covers rule: Use single and double quotes when appropriate.
		 If you're not evaluating anything in the string, use single quotes. -->
	<rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired"/>

	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="exact" value="false"/>
			<property name="indent" value="4"/>
			<property name="tabIndent" value="true"/>
			<property name="ignoreIndentationTokens" type="array">
				<element value="T_HEREDOC"/>
				<element value="T_NOWDOC"/>
				<element value="T_INLINE_HTML"/>
			</property>
		</properties>
	</rule>
	<!-- Covers rule: Use real tabs and not spaces. -->
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>

	<!-- Covers rule: For switch structures case should indent one tab from the
		 switch statement and break one tab from the case statement. -->
	<rule ref="PSR2.ControlStructures.SwitchDeclaration"/>
	<!-- Prevent duplicate messages for the same issue. Covered by other sniffs. -->
	<rule ref="PSR2.ControlStructures.SwitchDeclaration.NotLower">
		<severity>0</severity>
	</rule>
	<rule ref="PSR2.ControlStructures.SwitchDeclaration.BreakNotNewLine">
		<severity>0</severity>
	</rule>
	<rule ref="PSR2.ControlStructures.SwitchDeclaration.BodyOnNextLine">
		<severity>0</severity>
	</rule>
	<!-- Implied through the examples: align the assignment operator in a block of assignments. -->
	<rule ref="Generic.Formatting.MultipleStatementAlignment">
		<properties>
			<property name="maxPadding" value="40"/>
		</properties>
	</rule>
	<!-- Covers rule: Braces shall be used for all blocks. -->
	<rule ref="Squiz.ControlStructures.ControlSignature"/>

	<!-- Covers rule: Braces should always be used, even when they are not required. -->
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>

	<!-- Covers rule: Arrays must be declared using long array syntax. -->
	<rule ref="Generic.Arrays.DisallowShortArraySyntax"/>

	<!-- Covers rule: ... use elseif for conditionals. -->
	<rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>

	<!-- Covers rule: When embedding multi-line PHP snippets within a HTML block, the
		 PHP open and close tags must be on a line by themselves. -->
	<rule ref="Squiz.PHP.EmbeddedPhp"/>
	<rule ref="Squiz.PHP.EmbeddedPhp.SpacingBefore">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.EmbeddedPhp.Indent">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.EmbeddedPhp.OpenTagIndent">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.EmbeddedPhp.SpacingAfter">
		<severity>0</severity>
	</rule>
	<!-- Covers rule: Never use shorthand PHP start tags. Always use full PHP tags. -->
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.PHP.DisallowAlternativePHPTags"/>

	<!-- Covers rule: Remove trailing whitespace at the end of each line of code. -->
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

	<!-- Covers rule: Omitting the closing PHP tag at the end of a file is preferred. -->
	<rule ref="PSR2.Files.ClosingTag"/>

	<!-- Covers rule: Always put spaces after commas, and on both sides of logical,
		 comparison, string and assignment operators. -->
	<rule ref="Squiz.Strings.ConcatenationSpacing">
		<properties>
			<property name="spacing" value="1"/>
			<property name="ignoreNewlines" value="true"/>
		</properties>
	</rule><rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie">
		<properties>
			<property name="checkClosures" value="true"/>
		</properties>
	</rule>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="equalsSpacing" value="1"/>
			<property name="requiredSpacesAfterOpen" value="1"/>
			<property name="requiredSpacesBeforeClose" value="1"/>
		</properties>
	</rule>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingBeforeClose">
		<severity>0</severity>
	</rule>


	<!-- Covers rule: Call a function, like so: my_function( $param1, func_param( $param2 ) ); -->
	<rule ref="PEAR.Functions.FunctionCallSignature">
		<properties>
			<property name="requiredSpacesAfterOpen" value="1"/>
			<property name="requiredSpacesBeforeClose" value="1"/>

			<!-- ... and for multi-line function calls, there should only be one parameter per line. -->
			<property name="allowMultipleArguments" value="false"/>
		</properties>
	</rule>

	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>

	<!-- Rule: Perform logical comparisons, like so: if ( ! $foo ) { -->

	<!-- Covers rule: Type casts must be lowercase. Always prefer the short form
		 of type casts, (int) instead of (integer) and (bool) rather than (boolean).
		 For float casts use (float). -->
	<rule ref="Generic.Formatting.SpaceAfterCast"/>
	<rule ref="Squiz.WhiteSpace.CastSpacing"/>
	<rule ref="PSR12.Keywords.ShortFormTypeKeywords"/>
	<!-- N.B.: This sniff also checks the case of (parameter/return) type declarations, not just type casts. -->
	<rule ref="Generic.PHP.LowerCaseType"/>
	<!-- Covers rule: Unless otherwise specified, parentheses should have spaces inside of them. -->
	<rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
		<properties>
			<property name="spacing" value="1"/>
			<property name="ignoreNewlines" value="true"/>
		</properties>
	</rule>

	<!-- Covers rule: Class names should use capitalized words separated by underscores. -->
	<rule ref="PEAR.NamingConventions.ValidClassName"/>

	<!-- Covers rule: Constants should be in all upper-case with underscores separating words. -->
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

	<!-- Rule: In general, readability is more important than cleverness or brevity.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/607 -->
	<rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>
	<!-- Rule: The goto statement must never be used. -->
	<rule ref="Generic.PHP.DiscourageGoto">
		<type>error</type>
		<message>The "goto" language construct should not be used.</message>
	</rule>

	<!-- Rule: The eval() construct is very dangerous, and is impossible to secure. ... these must not be used. -->
	<rule ref="Squiz.PHP.Eval.Discouraged">
		<type>error</type>
		<message>eval() is a security risk so not allowed.</message>
	</rule>
	<!-- Important to prevent issues with content being sent before headers. -->
	<rule ref="Generic.Files.ByteOrderMark"/>

	<!-- All line endings should be \n. -->
	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>

	<!-- All files should end with a new line. -->
	<rule ref="Generic.Files.EndFileNewline"/>

	<!-- No whitespace should come before semicolons. -->
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

	<!-- Lowercase PHP constants, like true, false and null. -->
	<!-- https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/#naming-conventions -->
	<rule ref="Generic.PHP.LowerCaseConstant"/>

	<!-- Lowercase PHP keywords, like class, function and case. -->
	<rule ref="Generic.PHP.LowerCaseKeyword"/>

	<!-- Class opening braces should be on the same line as the statement. -->
	<rule ref="Generic.Classes.OpeningBraceSameLine"/>

	<!-- Object operators should not have whitespace around them unless they are multi-line. -->
	<rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
		<properties>
			<property name="ignoreNewlines" value="true"/>
		</properties>
	</rule>

	<!-- References to self in a class should be lower-case and not have extraneous spaces,
		 per implicit conventions in the core codebase; the NotUsed code refers to using the
		 fully-qualified class name instead of self, for which there are instances in core. -->
	<rule ref="Squiz.Classes.SelfMemberReference"/>
	<rule ref="Squiz.Classes.SelfMemberReference.NotUsed">
		<severity>0</severity>
	</rule>

</ruleset>
